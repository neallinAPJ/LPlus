@using Model.Note
@using System.Security.Claims
@using Common.Helper
@model List<NoteModel>
@{
    var datas = Model.OrderByDescending(o => o.CreateDate).GroupBy(i => i.CreateDate.Date);
    string UserName = User.Identities.First().IsAuthenticated ? User.Identities.First(u => u.IsAuthenticated).FindFirst(ClaimTypes.Name).Value : "游客";
}

@if (Model != null && Model.Count() > 0)
{
    <div id="timeline-data">
        @Html.Partial("_TimeLineData", datas)
        </div>
        <form id="commentData">
            <input type="hidden" id="CreateBy" name="CreateBy" value="@UserName" />
            <input type="hidden" id="Content" name="Content" />
            <input type="hidden" id="NoteID" name="NoteID" />
            <input type="hidden" id="Address" name="Address" />
        </form>
        }
        @Html.Partial("_CommentJS")
        <script type="text/javascript">

            function getNowFormatDate() {
                var date = new Date();
                var seperator1 = "/";
                var seperator2 = ":";
                var month = date.getMonth() + 1;
                var strDate = date.getDate();
                var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate
                        + " " + date.getHours() + seperator2 + date.getMinutes()
                        + seperator2 + date.getSeconds();
                return currentdate;
            }
            var writeComment = function (id) {
                if ($("#Input_text-" + id).html() != null && $("#Input_text-" + id).html() != "") {
                    $("#Content").val($("#Input_text-" + id).html());
                    $("#NoteID").val(id);
                    var data = $("#commentData").serialize();
                    var url = "@Url.Action("PostComment", "Note","Web")";
                    ajaxMethod.post(url, data, function (result) {
                        var count = parseInt($("#count-" + id).html()) + 1;
                        $("#count-" + id).html(count);
                        if ($("#commentOnclick-" + id).attr("aria-expanded") == false
                            || $("#commentOnclick-" + id).attr("aria-expanded") == "false"
                            || $("#commentOnclick-" + id).attr("aria-expanded") == undefined) {
                            $("#commentOnclick-" + id).trigger("click");
                        }
                        $("#comment-" + id).find("ul").append(result);
                        $("#Input_text-" + id).html("");
                    });
                }
            }
            var like = function (id) {
                var url = "@Url.Action("LikeCount", "Note", "Web")" + "&noteID=" + id;
                ajaxMethod.get(url, "", function () {
                    var count = parseInt($("#like-" + id).html()) + 1;
                    $("#like-" + id).html(count);
                });
            }
            var deleteComment = function (id, noteID) {
                var url = "@Url.Action("DeleteComment", "Note", "Web")" + "&commentID=" + id;
                ajaxMethod.get(url, "", function () {
                    var count = parseInt($("#count-" + noteID).html()) - 1;
                    $("#count-" + noteID).html(count);
                    $(".media-list").find("#media-" + id).remove();
                });

            }
            var publishNote = function (id) {
                if ($("#Input_text-" + id).html() != null && $("#Input_text-" + id).html() != "") {
                    $("#Content").val($("#Input_text-" + id).html());
                    $("#Address").val(getLocation());
                    var data = $("#commentData").serialize();
                    var url = "@Url.Action("PublishNote", "Note","Web")";
                    ajaxMethod.post(url, data, function (result) {
                        $(".timeline-wrapper").html(result);
                    });
                }

            }

        </script>
